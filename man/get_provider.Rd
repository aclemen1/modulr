% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/define.R
\name{get_provider}
\alias{get_provider}
\title{Get the provider of a Module.}
\usage{
get_provider(name = .Last.name, load = FALSE)
}
\arguments{
\item{name}{A string (character vector of lenght one).

  A module name can contain letters, figures and some special characters,
  namely \code{_}, \code{-}, and \code{/}. The latter is a namespace
  separator.

  Names containing \code{/mock/}, \code{/mocks/}, \code{/test/},
  \code{/tests/}, \code{/example/}, or \code{/examples/} have a special
  meaning related to code testing and examples.

  The name "modulr" corresponds to a special module and is therefore
  reserved.}

\item{load}{A flag. Should an undefined module be implicitely loaded?}
}
\value{
A function identical to the provider function of the module.
}
\description{
Get the provider function of a module.
}
\details{
For testing purposes, it is often useful for mocks to be able to refer to
 the provider of a module.
}
\section{Warning}{

 It is considered a very bad practice to define, touch, undefine, load, make,
 reset, or perform any other operation from within a module definition that
 may alterate the internal state of modulr.
}
\examples{
reset()
define("foo", NULL, function() "foo")
define("bar", list(foo = "foo"), function(foo) paste0(foo, "bar"))
define("foo/mock", NULL, function() "foooooo")
define("bar/mock", list(foo = "foo/mock"), get_provider("bar"))
make("bar/mock")

reset()
tmp_dir <- tempfile("modulr_")
dir.create(tmp_dir)
tmp_file <- file.path(tmp_dir, "foo.R")
cat('define("foo", NULL, function() "Hello World!")', file = tmp_file)
root_config$set(tmp_dir)
\dontrun{get_provider("foo", load = FALSE)}
get_provider("foo", load = TRUE)
unlink(tmp_dir, recursive = TRUE)
}
\seealso{
\code{\link{define}}, \code{\link{make}}, \code{\link{reset}},
  and \code{link{root_config}}.
}

