% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/special.R
\name{modulr-module}
\alias{get_dirname}
\alias{get_filename}
\alias{get_module_name}
\alias{get_module_options}
\alias{message_info}
\alias{message_stop}
\alias{message_warn}
\alias{modulr-module}
\title{Special Module \code{'modulr'}}
\format{A list of functions.
\preformatted{
get_module_name()
get_module_options()
get_filename()
get_dirname()
message_info(...)
message_warn(...)
message_stop(...)}}
\description{
Access module metadata and helper functions.
}
\details{
The purpose of the special module \code{'modulr'} is to give access
to metadata and useful helper functions related to the module into which it
is injected.
}
\section{\code{get_module_name()}}{

Returns a string (character vector of lenght one) containing the module name.
See \code{\link{define}}.
}

\section{\code{get_module_options()}}{

Returns a list containing the module options. See
\code{\link{module_options}}. \bold{Deprecated and kept for backward
compatibility.}
}

\section{\code{get_filename()}}{

Returns a string (character vector of lenght one) containing the module
filename.
}

\section{\code{get_dirname()}}{

Returns a string (character vector of lenght one) containing the module
dirname.
}

\section{\code{message_info(...), message_warn(...), and message_stop(...)}}{

Outputs an informative, warning, or critical and stopping message, prefixed
with a timestamp and the module name. Such messages are particularily useful
in modules involved in long chains of dependencies and workflows.
}
\examples{
reset()
define("foo", list(modulr = "modulr"), function(modulr) {
  module_name <- modulr$get_module_name()
  list(
    info = function() modulr$message_info("Module name: ", module_name),
    warn = function() modulr$message_warn("Module name: ", module_name),
    stop = function() modulr$message_stop("Module name: ", module_name)
  )
})
foo <- make()
foo$info()
foo$warn()

reset()
tmp_dir <- tempfile("modulr_")
dir.create(tmp_dir)
tmp_file <- file.path(tmp_dir, "foo.R")
cat(
'define("foo", list(modulr = "modulr"), function(modulr) {
  modulr$message_info("Module filename: ", modulr$get_filename())
  modulr$message_info("Module dirname: ", modulr$get_dirname())
})', sep = "\\n", file = tmp_file)
root_config$set(tmp_dir)
make("foo")
unlink(tmp_dir, recursive = TRUE)

\dontrun{foo$stop()}
}
\seealso{
\code{\link{define}}, \code{\link{module_options}}, and
  \code{\link{reset}}.
}

