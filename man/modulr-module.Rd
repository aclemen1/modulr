% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/special.R
\name{modulr-module}
\alias{get_dirname}
\alias{get_filename}
\alias{get_module_name}
\alias{get_module_options}
\alias{message_info}
\alias{message_stop}
\alias{message_warn}
\alias{modulr-module}
\alias{post_evaluation_hook}
\title{Special Module \code{'modulr'}}
\format{A list of functions.
\preformatted{
get_module_name()
get_module_options()
get_filename()
get_dirname()
post_evaluation_hook(expr, add = FALSE)
message_info(...)
message_warn(...)
message_stop(...)}}
\description{
Access module metadata and helper functions.
}
\details{
The purpose of the special module \code{'modulr'} is to give access
to metadata and useful helper functions related to the module into which it
is injected.
}
\section{\code{get_module_name()}}{

Returns a string (character vector of lenght one) containing the module name.
See \code{\link{define}}.
}

\section{\code{get_module_options()}}{

Returns a list containing the module options. See
\code{\link{module_options}}. \bold{Deprecated and kept for backward
compatibility.}
}

\section{\code{get_filename(absolute = TRUE)}}{

Returns a string (character vector of lenght one) containing the module
(absolute) filename.
}

\section{\code{get_dirname(absolute = TRUE)}}{

Returns a string (character vector of lenght one) containing the module
(absolute) dirname.
}

\section{\code{post_evaluation_hook(expr, add = FALSE)}}{

Records the expression given as its argument as needing to be executed when
the current module evaluation exits (either naturally or as the result of an
error). If no expression is provided, i.e., the call is
`post_evaluation_hook()`, then the current expression is removed. If `add` is
`TRUE`, `expr` is added after any previously set expressions; otherwise (the
default) `expr` will overwrite any previously set expressions.
}

\section{\code{message_info(...), message_warn(...), and message_stop(...)}}{

Outputs an informative, warning, or critical and stopping message, prefixed
with a timestamp and the module name. Such messages are particularily useful
in modules involved in long chains of dependencies and workflows.
}
\examples{
reset()
define("foo", list(modulr = "modulr"), function(modulr) {
  module_name <- modulr$get_module_name()
  list(
    info = function() modulr$message_info("Module name: ", module_name),
    warn = function() modulr$message_warn("Module name: ", module_name),
    stop = function() modulr$message_stop("Module name: ", module_name)
  )
})
foo <- make()
foo$info()
foo$warn()

reset()
tmp_dir <- tempfile("modulr_")
dir.create(tmp_dir)
tmp_file <- file.path(tmp_dir, "foo.R")
cat(
'define("foo", list(modulr = "modulr"), function(modulr) {
  modulr$message_info("Module filename: ", modulr$get_filename())
  modulr$message_info("Module dirname: ", modulr$get_dirname())
})', sep = "\\n", file = tmp_file)
root_config$set(tmp_dir)
make("foo")
unlink(tmp_dir, recursive = TRUE)

\dontrun{foo$stop()}

reset()
"foo" \%requires\% list(modulr = "modulr") \%provides\% {
  modulr$post_evaluation_hook(touch("foo"))
  message("Hello, I am a ", sQuote("no-scoped"), " module.")
}
make("foo")
make("foo")

reset()
"foo" \%requires\% list(modulr = "modulr") \%provides\% {
  modulr$post_evaluation_hook(undefine("foo"))
  message("Hello, I am an ", sQuote("ephemeral"), " module.")
}
make("foo")
\dontrun{make("foo")}

}
\seealso{
\code{\link{define}}, \code{\link{module_options}}, and
  \code{\link{reset}}.
}

