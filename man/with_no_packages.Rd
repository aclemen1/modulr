% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgs.R
\name{with_no_packages}
\alias{with_no_packages}
\alias{without_packages}
\alias{with_packages}
\alias{with_module_packages}
\alias{with_namespace_packages}
\title{With (...) Packages.}
\usage{
with_no_packages(code, ignore = NULL)

without_packages(code, ignore = NULL)

with_packages(lib_path, code, ...)

with_module_packages(code, ...)

with_namespace_packages(namespace, code, ...)
}
\arguments{
\item{code}{Any object. Code to execute in the temporary environment.}

\item{ignore}{A vector of character strings. Packages (in addition to base
packages) to ignore in the process.}

\item{lib_path}{A string (character vector of length one) containing the path
of the packages library.}

\item{...}{Further arguments to be passed to \code{\link{with_no_packages}}.}

\item{namespace}{A string (character vector of length one) containing the
namespace of the module to be used as path for the packages library.}
}
\value{
The result of the evaluation of the \code{code} argument.
}
\description{
Temporarily unload and detach packages, and optionally use a specific
packages library for the module.
}
\details{
Packages are temporarily unloaded and detached from the search path. When
restored, the ordering of the packages on the search path is preserved. Base
packages and packages passed to the \code{ignore} parameter are ignored in
the process. By default, the vector of names of ignored packages is taken
from the \code{modulr.ignore_packages} R option.

\code{with_packages} uses the library given by \code{lib_path}.

\code{with_module_packages} uses a dedicated library for the module, using
the module name as path.

\code{with_namespace_packages} uses a shared library for all the modules
under the given \code{namespace} parameter.
}
\section{Warning}{
 This is an experimental feature subject to changes.
}

\examples{
print(sessionInfo())
\dontrun{
with_no_packages({
  message("Look mum, no packages!")
  print(sessionInfo())
})}
print(sessionInfo())

print(sessionInfo())
\dontrun{
with_packages("~/my_packages", {
 if (!"pooh" \%in\% rownames(utils::installed.packages()))
   utils::install.packages("pooh")
 library(pooh)
 print(sessionInfo())
})}
print(sessionInfo())

## In file "foos/foobar.R"  # Exclude Linting
"foos/foobar" \%provides\% {
 print(sessionInfo())
 with_module_packages({
   if (!"devtools" \%in\% rownames(utils::installed.packages()))
     utils::install.packages("devtools")
   library(devtools)
   if (!"pooh" \%in\% rownames(utils::installed.packages()))
     devtools::install_version("pooh", "0.2")
   library(pooh)
   print(sessionInfo())
 })
print(sessionInfo())
}
## EOF
\dontrun{make()}

## In file "foos/foobaz.R"  # Exclude Linting
"foos/foobaz" \%provides\% {
 print(sessionInfo())
 with_namespace_packages("foos", {
   if (!"devtools" \%in\% rownames(utils::installed.packages()))
     utils::install.packages("devtools")
   library(devtools)
   if (!"pooh" \%in\% rownames(utils::installed.packages()))
     devtools::install_version("pooh", "0.3")
   library(pooh)
   print(sessionInfo())
 })
print(sessionInfo())
}
## EOF
\dontrun{make()}

}
\seealso{
\code{\link[withr]{withr}} for examples of 'with_' methods,
  \code{\link{getOption}}, \code{\link{library}}, \code{\link{options}}, and
  \code{\link{search}}.
}
