% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modulr.R
\name{injector}
\alias{get_default_injector}
\alias{get_injector}
\alias{injector}
\alias{new_injector}
\alias{set_default_injector}
\alias{set_injector}
\title{Create, Set, and Get Injectors (Modulr Internal States).}
\usage{
new_injector()

set_injector(injector = new_injector())

set_default_injector()

get_injector()

get_default_injector()
}
\arguments{
\item{injector}{An injector returned by \code{new_injector}.}
}
\value{
Every function returns an injector (R environment).
}
\description{
Create an new injector, set and get the current injector, and
  get the default injector.
}
\details{
An injector essentially carries an internal modulr state. Technically, it is
is an R environment containing every piece of information needed by modulr to
reflect the module definitions, the dependencies between them, the
configurations, and all the associated metadata. As a PORO (Plain Old R
Object), an injector can be stored to disk with the session data, or shared
between Alice and Bob, for instance.

When the modulr package is loaded, a default injector is created. This
injector is returned by the \code{get_default_injector} function.
}
\section{Warning}{
 Setting an injector from within a module is not allowed and
  results in an error.
}
\examples{
reset()
define("foo", NULL, function() NULL)
injector <- new_injector()
previous_injector <- set_injector(injector)
define("bar", NULL, function() NULL)
lsmod()
set_injector(previous_injector)
lsmod()

\dontrun{
.Last <- function() {
 # Bind the current injector (internal modulr state) to the environment.
 injector <- get_injector()
}
quit(save = "yes")}

reset()
define("foo", NULL, function() "Hi Bob!")
## Alice saves its injector and sends it to ...
saveRDS(get_injector(), file = "injector.R")
## ... Bob who restores it.
injector <- readRDS("injector.R")
set_injector(injector)
make("foo")

}
\seealso{
\code{\link{define}}, \code{\link{list_modules}},
  \code{\link{make}}, and \code{\link{reset}}.
}

