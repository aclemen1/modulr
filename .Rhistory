username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
# Main module
.main <- "main" %requires% list("unisis/dwh", "modulr") %provides%
function(dwh, modulr) {
all_tables <<- dwh$get_all_tables()
rawub <<- dwh$get_table("RAWUB")
NULL
}
# Main module instanciation
.main()
#.main(force_reinstanciate=T)
.main()
.main <- "main" %requires% list("unisis/dwh", "modulr") %provides%
function(dwh, modulr) {
all_tables <<- dwh$get_all_tables()
rawub <<- dwh$get_table("RAWUB")
invisible(NULL)
}
.main()
invisible(.main())
invisible(.main(force_redefine_reinstanciate_all = T))
if(exists(".old_wd")) {
setwd(.old_wd)
message("Switched back to previous working directory: ", getwd())
rm(.old_wd)
}
if(!exists(".old_wd")) {
.old_wd = getwd()
setwd(file.path(getwd(), "tmp/example"))
message("Switched to example's working directory: ", getwd())
}
.main <- "main" %requires% list("unisis/dwh", "modulr") %provides%
function(dwh, modulr) {
all_tables <<- dwh$get_all_tables()
rawub <<- dwh$get_table("RAWUB")
NULL
}
invisible(.main(force_redefine_reinstanciate_all = T))
if(!exists(".old_wd")) {
.old_wd = getwd()
setwd(file.path(getwd(), "tmp/example"))
message("Switched to example's working directory: ", getwd())
}
library(modulr)
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "lib/unisis"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
.main <- "main" %requires% list("unisis/dwh", "modulr") %provides%
function(dwh, modulr) {
all_tables <<- dwh$get_all_tables()
rawub <<- dwh$get_table("RAWUB")
NULL
}
.main(force_redefine_reinstanciate_all = T)
.main()
.main(force_redefine_reinstanciate_all = T)
getwd()
.main(force_reinstanciate_all = T)
library(modulr)
if(!exists(".old_wd")) {
.old_wd = getwd()
setwd(file.path(getwd(), "tmp/example"))
message("Switched to example's working directory: ", getwd())
}
# ------------------------------------------------------------------------------
library(modulr)
# Configuration
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "lib/unisis"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
# Main module
.main <- "main" %requires% list("unisis/dwh", "modulr") %provides%
function(dwh, modulr) {
all_tables <<- dwh$get_all_tables()
rawub <<- dwh$get_table("RAWUB")
NULL
}
# Main module instanciation
.main()
.main(force_reinstanciate_all = T)
library(modulr)
source('~/RStudio/modulr/tmp/example/main.R')
reset()
source('~/RStudio/modulr/tmp/example/main.R')
reset()
source('~/RStudio/modulr/tmp/example/main.R')
if(!exists(".old_wd")) {
.old_wd = getwd()
setwd(file.path(getwd(), "tmp/example"))
message("Switched to example's working directory: ", getwd())
}
# ------------------------------------------------------------------------------
library(modulr)
# Configuration
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "lib/unisis"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
# Main module
.main <- "main" %requires% list("unisis/dwh", "modulr") %provides%
function(dwh, modulr) {
all_tables <<- dwh$get_all_tables()
rawub <<- dwh$get_table("RAWUB")
NULL
}
# Main module instanciation
.main()
source('~/RStudio/modulr/example/main.R')
reset()
source('~/RStudio/modulr/example/main.R')
library(modulr)
.main()
source('~/RStudio/modulr/example/main.R')
.main()
.main(force_reinstanciate=T)
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "lib/unisis"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "prod"
)
))
.main()
.main(force_reinstanciate=T) # will reload the tables
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "lib/unisis"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
.main(force_reinstanciate=T) # will reload the tables
.main()
source('~/RStudio/modulr/example/main.R')
reset()
source('~/RStudio/modulr/example/main.R')
reset()
library(modulr)
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis" # register UNISIS modules installation
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
.main <- "main" %requires% list("unisis/dwh") %provides%
function(dwh) {
all_tables <<- dwh$get_all_tables()
rawub <<- dwh$get_table("RAWUB")
NULL
}
.main()
.main(force_reinstanciate=T) # will reload the tables
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis" # register UNISIS modules installation
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "prod"
)
))
.main(force_reinstanciate=T) # will reload the tables
"hello" %requires% list() %provides%
function () {
function(who) sprintf("Hello, %s", who)
}
"who" %provides% function() {
"les gars"
}
main <- "main" %requires% list("hello", "who") %provides%
function(hello, who) {
hello(who)
}
main()
.main2 <- "main2" %requires% list("unisis/dwh/table/rawub") %provides%
function(rawub) {
View(rawub)
NULL
}
.main2()
.main2 <- "main2" %requires% list("unisis/table/rawub") %provides%
function(rawub) {
View(rawub)
NULL
}
.main2()
.main2 <- "main2" %requires% list("unisis/table/rawub") %provides%
function(rawub) {
View(rawub)
NULL
}
.main2()
reset()
library(modulr)
# Configuration
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis" # register UNISIS modules installation
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
.main2 <- "main2" %requires% list("unisis/table/rawub") %provides%
function(rawub) {
View(rawub)
NULL
}
.main2()
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
x %*% t(y) == tcrossprod(x, y)
}
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who) {
print(hello(who))
print(is_BLAS_ok)
}
main()
"hello" %requires% list() %provides%
function () {
function(who) sprintf("Hello, %s", who)
}
"who" %provides% function() {
"les gars"
}
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
x %*% t(y) == tcrossprod(x, y)
}
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who) {
print(hello(who))
print(is_BLAS_ok)
}
main()
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
print(x %*% t(y))
print(tcrossprod(x, y))
NULL
}
main()
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who) {
print(hello(who))
print(is_BLAS_ok)
}
main()
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who, is_BLAS_ok) {
print(hello(who))
print(is_BLAS_ok)
}
main()
main(force_reinstanciate_all = T)
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
x %*% t(y) == tcrossprod(x, y)
}
main(force_reinstanciate_all = T)
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
x %*% t(y) == tcrossprod(x, y)
}
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who, is_BLAS_ok) {
print(hello(who))
print(is_BLAS_ok)
}
main(force_reinstanciate_all = T)
reset()
"hello" %requires% list() %provides%
function () {
browser()
function(who) sprintf("Hello, %s", who)
}
main(force_reinstanciate_all = T)
"hello" %requires% list() %provides%
function () {
browser()
function(who) sprintf("Hello, %s", who)
}
# define("hello", list(), function() {
#   function(who) sprintf("Hello, %s", who)
# })
"who" %provides% function() {
"les gars"
}
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
all(x %*% t(y) == tcrossprod(x, y), na.rm = T)
}
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who, is_BLAS_ok) {
print(hello(who))
print(is_BLAS_ok)
}
main(force_reinstanciate_all = T)
"hello" %requires% list() %provides%
function () {
browser()
function(who) {
x <- 1
sprintf("Hello, %s", who)
}
main(force_reinstanciate_all = T)
"hello" %requires% list() %provides%
function () {
function(who) {
browser()
x <- 1
sprintf("Hello, %s", who)
}
main(force_reinstanciate_all = T)
?knitr
library(knitr)
?knitr
