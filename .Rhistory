})
test
test()
test(force=T)
require(stringr)
.configuration = list()
.register = list()
configure = function(configuration) {
.configuration = configuration
}
.resolve_mapping = function(name, scope_name) {
mappings = .configuration$mappings[[scope_name]]
if(is.null(mappings)) return(name)
candidates = Map(function(map) {
start_end_pos = str_locate(name, map)
list(
map = map
, start = start_end_pos[1]
, end = start_end_pos[2]
)
}, names(mappings))
candidates = Filter(function(candidate) {
candidate$start == 1
}, candidates)
if(length(candidates) == 0) return(name)
maximum_length = max(unlist(Map(function(candidate) {
candidate$end
}, candidates)))
candidates = Filter(function(candidate) {
candidate$end == maximum_length
}, candidates)
if(length(candidates) > 1) warning(
"More than one matching mapping. ",
"Considering only the first occurence.")
matching_map = candidates[[1]]$map
str_replace(name, matching_map, mappings[[matching_map]])
}
.make_path = function(path) {
if(str_sub(path, -1) != "/") path = paste0(path, "/")
path
}
.split_filename = function(filename) {
components = str_split(filename, "/")[[1]]
basename = tail(components, 1)
basename_components = str_split(basename, "\\.")[[1]]
if(length(basename_components) > 1) {
extension = tail(basename_components, 1)
name = paste(head(basename_components, length(basename_components) - 1), collapse = ".")
} else {
extension = ""
name = basename_components
}
path = paste(
head(components, length(components) - 1),
collapse = "/")
list(
filename = filename
, path = path
, basename = basename
, name = name
, extension = extension
)
}
.resolve_path = function(name, scope_name) {
if(missing(scope_name)) injected_name = name else
injected_name = .resolve_mapping(name, scope_name)
splitted_injected_name = .split_filename(injected_name)
injected_namespace = splitted_injected_name$path
injected_basename = splitted_injected_name$basename
candidates = Map(function(namespace) {
path = .split_filename(.make_path(namespace))$path
start_end_pos = str_locate(injected_namespace, path)
list(
namespace = namespace
, start = start_end_pos[1]
, end = start_end_pos[2]
)
}, names(.configuration$paths))
candidates = Filter(function(candidate) {
candidate$start == 1
}, candidates)
if(length(candidates) == 0) return(injected_name)
maximum_length = max(unlist(Map(function(candidate) {
candidate$end
}, candidates)))
candidates = Filter(function(candidate) {
candidate$end == maximum_length
}, candidates)
if(length(candidates) > 1) warning(
"More than one matching namespace. ",
"Considering only the first occurence.")
matching_namespace = candidates[[1]]$namespace
str_replace(injected_name, matching_namespace, .configuration$paths[[matching_namespace]])
}
.is_defined = function(name) {
!is.null(.register[[name]])
}
# make sure all dependent modules are defined
.define_all_dependent_modules = function(name) {
dependencies = list()
iteration = function(name, scope_name) {
if(!(name %in% dependencies)) {
if(!.is_defined(name)) {
if(missing(scope_name)) path = .resolve_path(name) else
path = .resolve_path(name, scope_name)
# TODO: implement .Rmd sourcing as well
message(
"Module '", name, "' not yet defined. Trying to load it from ",
path, ".R (and .Rmd soon).")
source(paste0(path, ".R"))
}
dependencies <<- c(dependencies, name)
Map(function(dependency) iteration(dependency, name),
.register[[name]]$dependencies)
}
iteration(name)
unlist(dependencies)
}
.build_dependency_graph = function(all_dependencies) {
from = c()
to = c()
for(name in all_dependencies) {
if(length(.register[[name]]$dependencies) > 0) {
array = rbind(unlist(.register[[name]]$dependencies), name,
deparse.level = 0)
from = c(from, array[1, ])
to = c(to, array[2, ])
}
list(
from = from,
to = to
)
}
.topological_sort = function(graph) {
if(length(graph$from) > 0)
pooh::tsort(graph$from, graph$to)
}
instanciate = function(name, force = F) {
all_dependencies = .define_all_dependent_modules(name)
dependency_graph = .build_dependency_graph(all_dependencies)
ordered_names = .topological_sort(dependency_graph)
if(is.null(ordered_names)) ordered_names = name
for(name in ordered_names) {
module = .register[[name]]
if(!module$instanciated | force) {
if(length(module$dependencies) > 0) {
module$instance = do.call(module$factory, args = module$dependencies)
} else {
module$instance = module$factory()
}
module$instanciated = T
.register[[name]] <<- module
}
.register[[name]]$instance
}
define = function(name, dependencies, factory) {
register = .register
register[[name]]$name = name
register[[name]]$dependencies = dependencies
register[[name]]$factory = factory
register[[name]]$instance = NULL
register[[name]]$instanciated = F
.register <<- register
function(force=F) instanciate(name, force)
}
reset = function() {
.register <<- NULL
}
##################
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
define("other", list(), function() {
message("Module 'other' running.")
"other"
})
test = define("test", list("other"), function(other) {
message("Module 'test' running.")
paste("provisions", other)
})
test
test()
test(force=T)
test()
instanciate("test/module_4")
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
instanciate("test/module_4")
.configuration
configure = function(configuration) {
.configuration <<- configuration
}
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
instanciate("test/module_4")
instanciate("test/module_2")
reset()
instanciate("test/module_2")
library(modulr)
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
define("other", list(), function() {
message("Module 'other' running.")
"other"
})
test = define("test", list("other"), function(other) {
message("Module 'test' running.")
paste("provisions", other)
})
test
test()
test(force=T)
test()
reset()
instanciate("test/module_4")
library(modulr)
# define "module_1"
define("module_1", list(), function() {
message("Module 1"); "value 1"})
# define "module_2"
m2 = define("module_2", list("module_1"), function(m1) {
message("Module 2 with one dependency"); paste(m1, "value 2")})
# instanciate "module_2"
m2()
library(modulr)
# define "module_1"
define("module_1", list(), function() {
message("Module 1"); "value 1"})
# define "module_2"
m2 = define("module_2", list("module_1"), function(m1) {
message("Module 2 with one dependency"); paste(m1, "value 2")})
# instanciate "module_2"
m2()
# define "module_1"
define("module_1", list(), function() {
message("Module 1"); "value 1"})
# define "module_2"
m2 = define("module_2", list("module_1"), function(m1) {
message("Module 2 with one dependency"); paste(m1, "value 2")})
# instanciate "module_2"
m2()
define("module_1", list(), function() {
message("Module 1"); "value 1"})
require(modulr)
define("module_1", list(), function() {
message("Module 1"); "value 1"})
library(modulr)
define("module_1", list(), function() {
message("Module 1"); "value 1"})
library(modulr)
define("module_1", list(), function() {
message("Module 1"); "value 1"})
library(modulr)
define("module_1", list(), function() {
message("Module 1"); "value 1"})
define("module_1", list(), function() {message("Module 1"); "value 1"})
w = define("module_1", list(), function() {message("Module 1"); "value 1"})
w()
define = function(name, dependencies, factory) {
register = .register
register[[name]]$name = name
register[[name]]$dependencies = dependencies
register[[name]]$factory = factory
register[[name]]$instance = NULL
register[[name]]$instanciated = F
.register <<- register
wrapper = function(force=F) instanciate(name, force)
invisible(wrapper)
}
define("module_1", list(), function() {message("Module 1"); "value 1"})
library(modulr)
define("module_1", list(), function() {message("Module 1"); "value 1"})
modulr_env = new.env()
assign(".configuration", list(), pos = modulr_env)
get(".configuration", pos = modulr_env)
assign("l", list(), pos = modulr_env)
assign("l[['toto']]", "titi", pos = modulr_env)
get("l", pos = modulr_env)
library(modulr)
define("module_1", list(), function() {message("Module 1"); "value 1"})
m1 = define("module_1", list(), function() {message("Module 1"); "value 1"})
m1()
library(modulr)
m1 = define("module_1", list(), function() {message("Module 1"); "value 1"})
m1()
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
library(modulr)
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
library(modulr)
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
define("other", list(), function() {
message("Module 'other' running.")
"other"
})
test = define("test", list("other"), function(other) {
message("Module 'test' running.")
paste("provisions", other)
})
test
test()
test(force=T)
test()
reset()
instanciate("test/module_4")
library(modulr)
instanciate("test/module_4")
configure(list(
paths = list(
"test" = "test"
, "unisis" = "test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
instanciate("test/module_4")
reset()
instanciate("test/module_4")
configure(list(
paths = list(
"test" = "test"
, "unisis" = "test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
instanciate("test/module_4")
wd()
pwd()
getwd()
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
instanciate("test/module_4")
library(modulr)
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
define("other", list(), function() {
message("Module 'other' running.")
"other"
})
test = define("test", list("other"), function(other) {
message("Module 'test' running.")
paste("provisions", other)
})
test
test()
test(force=T)
test()
instanciate("test/module_4")
library(modulr)
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
define("other", list(), function() {
message("Module 'other' running.")
"other"
})
test = define("test", list("other"), function(other) {
message("Module 'test' running.")
paste("provisions", other)
})
test
test()
test(force=T)
test()
instanciate("test/module_4")
reset()
instanciate("test/module_4")
library(modulr)
undefine("test/module_1")
instanciate("test/module_4")
library(modulr)
configure(list(
paths = list(
"test" = "tmp/test"
, "unisis" = "tmp/test/unisis"
, "unisis/old" = "old/tmp/test/unisis"
)
, mappings = list(
"test" = list(
"unisis/dwh" = "unisis/old/dwh"
)
))
define("other", list(), function() {
message("Module 'other' running.")
"other"
})
test = define("test", list("other"), function(other) {
message("Module 'test' running.")
paste("provisions", other)
})
test
test()
test(force=T)
test()
reset()
instanciate("test/module_4")
undefine("test/module_1")
instanciate("test/module_4")
reset()
instanciate("test/module_4")
undefine("test/module_2")
instanciate("test/module_4")
reset()
instanciate("test/module_4")
undefine("test/module_3")
instanciate("test/module_4")
undefine("test/module_1")
instanciate("test/module_4")
undefine("test/module_2")
undefine("test/module_1")
instanciate("test/module_4")
instanciate("test/module_1")
undefine("test/module_1")
instanciate("test/module_1")
library(modulr)
