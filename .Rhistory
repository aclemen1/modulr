.main(force_reinstanciate=T) # will reload the tables
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis" # register UNISIS modules installation
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "prod"
)
))
.main(force_reinstanciate=T) # will reload the tables
"hello" %requires% list() %provides%
function () {
function(who) sprintf("Hello, %s", who)
}
"who" %provides% function() {
"les gars"
}
main <- "main" %requires% list("hello", "who") %provides%
function(hello, who) {
hello(who)
}
main()
.main2 <- "main2" %requires% list("unisis/dwh/table/rawub") %provides%
function(rawub) {
View(rawub)
NULL
}
.main2()
.main2 <- "main2" %requires% list("unisis/table/rawub") %provides%
function(rawub) {
View(rawub)
NULL
}
.main2()
.main2 <- "main2" %requires% list("unisis/table/rawub") %provides%
function(rawub) {
View(rawub)
NULL
}
.main2()
reset()
library(modulr)
# Configuration
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis" # register UNISIS modules installation
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
.main2 <- "main2" %requires% list("unisis/table/rawub") %provides%
function(rawub) {
View(rawub)
NULL
}
.main2()
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
x %*% t(y) == tcrossprod(x, y)
}
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who) {
print(hello(who))
print(is_BLAS_ok)
}
main()
"hello" %requires% list() %provides%
function () {
function(who) sprintf("Hello, %s", who)
}
"who" %provides% function() {
"les gars"
}
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
x %*% t(y) == tcrossprod(x, y)
}
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who) {
print(hello(who))
print(is_BLAS_ok)
}
main()
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
print(x %*% t(y))
print(tcrossprod(x, y))
NULL
}
main()
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who) {
print(hello(who))
print(is_BLAS_ok)
}
main()
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who, is_BLAS_ok) {
print(hello(who))
print(is_BLAS_ok)
}
main()
main(force_reinstanciate_all = T)
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
x %*% t(y) == tcrossprod(x, y)
}
main(force_reinstanciate_all = T)
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
x %*% t(y) == tcrossprod(x, y)
}
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who, is_BLAS_ok) {
print(hello(who))
print(is_BLAS_ok)
}
main(force_reinstanciate_all = T)
reset()
"hello" %requires% list() %provides%
function () {
browser()
function(who) sprintf("Hello, %s", who)
}
main(force_reinstanciate_all = T)
"hello" %requires% list() %provides%
function () {
browser()
function(who) sprintf("Hello, %s", who)
}
# define("hello", list(), function() {
#   function(who) sprintf("Hello, %s", who)
# })
"who" %provides% function() {
"les gars"
}
"is_BLAS_ok" %provides%
function() {
x <- matrix(c(1, 0, NA, 1), 2, 2)
y <- matrix(c(1, 0, 0, 2, 1, 0), 3, 2)
all(x %*% t(y) == tcrossprod(x, y), na.rm = T)
}
main <- "main" %requires% list("hello", "who", "is_BLAS_ok") %provides%
function(hello, who, is_BLAS_ok) {
print(hello(who))
print(is_BLAS_ok)
}
main(force_reinstanciate_all = T)
"hello" %requires% list() %provides%
function () {
browser()
function(who) {
x <- 1
sprintf("Hello, %s", who)
}
main(force_reinstanciate_all = T)
"hello" %requires% list() %provides%
function () {
function(who) {
browser()
x <- 1
sprintf("Hello, %s", who)
}
main(force_reinstanciate_all = T)
?knitr
library(knitr)
?knitr
library(knitr)
library(modulr)
# Configuration
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis", # register UNISIS modules installation
"test" = "example"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
print(foo)
NULL
}
.test()
library(modulr)
.test()
knit("example//foo.Rmd", tangle = T)
?knit
knit("example//foo.Rmd", output = NULL, tangle = T)
knit("example//foo.Rmd", output = NULL, tangle = T, documentation = 0)
source(knit("example//foo.Rmd", output = tempfile(), tangle = T))
library(modulr)
undefine("test/foo")
.test()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
print(foo)
NULL
}
.test()
library(modulr)
# Configuration
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis", # register UNISIS modules installation
"test" = "example"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
print(foo)
NULL
}
.test()
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
browser()
print(foo)
NULL
}
.test()
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
browser()
print(foo)
NULL
}
.test()
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
print(foo)
NULL
}
.test()
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
print(sprintf("Hello, %s", foo))
NULL
}
.test()
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
print(sprintf("Hello, %s", foo))
}
.test()
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
reset()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
reset()
.test <- "test" %requires% list("test/foox") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
library(modulr)
reset()
.test <- "test" %requires% list("test/foox") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
reset()
debug()
debug(instanciate)
.test <- "test" %requires% list("test/foox") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
reset()
.test <- "test" %requires% list("test/foox") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
library(modulr)
reset()
.test <- "test" %requires% list("test/foox") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
NULL$test
!NULL$test
library(modulr)
reset()
.test <- "test" %requires% list("test/foox") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
library(modulr)
reset()
.test <- "test" %requires% list("test/foox") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis", # register UNISIS modules installation
"test" = "example"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
.test <- "test" %requires% list("test/foo") %provides%
function(foo) {
sprintf("Hello, %s", foo)
}
.test()
library(modulr)
reset()
configure(list(
# Namespace ==> path correspondances
paths = list(
"unisis" = "example/lib/unisis", # register UNISIS modules installation
"test" = "example"
),
# Modules parameters
parameters = list(
"unisis/dwh/get_connection" = list(
configs = list(
dev = list(
host = "devcog.unil.ch",
port = 1521,
service_name = "Sinfpildev.unil.ch",
username = "unisis",
password = "unisis35"
),
prod = list(
host = "prdcog.unil.ch",
port = 1521,
service_name = "Sinfpilprd.unil.ch",
username = "unisis",
password = "unisis35"
)
),
stage = "dev"
)
))
.main <- "main" %requires% list("unisis/dwh") %provides%
function(dwh) {
all_tables <<- dwh$get_all_tables()
rawub <<- dwh$get_table("RAWUB")
NULL
}
.main
.main()
library(modulr)
opts_knit$get("child.path")
opts_knit$set(root.dir = getwd())
getwd()
Sys.getenv("R_USER")
Sys.getenv("R_HOME")
Sys.getenv("HOME")
Sys.getenv("RSTUDIO_HOME")
Sys.getenv()
dirname(sys.frame(1)$ofile)
dirname(sys.frame()$ofile)
dirname(sys.frame(0)$ofile)
sys.frame()
sys.frame(0)
commandArgs(trailingOnly = FALSE)
sys.frames()[[1]]$ofile
?knitr
options(knitr.package.root.dir=getwd())
opts_knit$set(root.dir = getwd())
?installed.packages
?is.element
installed.packages()
.packages()
library(knitr)
.packages()
library()
